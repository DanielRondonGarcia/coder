name: Manual Docker Build and Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., v1.0.0)'
        required: true
        default: 'latest'
        type: string
      push_to_registry:
        description: 'Push image to GitHub Container Registry'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'DanielRondonGarcia'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: go.mod
          cache: true

      - name: Docker login
        if: ${{ inputs.push_to_registry }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Install depot.dev CLI
        uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5 # v1.6.0

      - name: Install mockgen
        run: go install go.uber.org/mock/mockgen@v0.5.0

      - name: Build Coder binaries for all architectures
        run: |
          make -j build/coder_linux_amd64 build/coder_linux_arm64 build/coder_linux_armv7

      - name: Build and push multi-arch Docker image
        uses: depot/build-push-action@2583627a84956d07561420dcc1d0eb1f2af3fac0 # v1.15.0
        with:
          project: wl5hnrrkns
          context: .
          file: scripts/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            BASE_IMAGE=ghcr.io/coder/coder-base:latest
            CODER_VERSION=${{ inputs.version }}
          provenance: true
          sbom: true
          push: ${{ inputs.push_to_registry }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/coder:${{ inputs.version }}
            ${{ inputs.version == 'latest' && format('ghcr.io/{0}/coder:latest', github.repository_owner) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify images
        if: ${{ inputs.push_to_registry }}
        run: |
          echo "Verifying multi-arch image..."
          
          # Retry logic for image verification
          for i in {1..10}; do
            rc=0
            raw_manifests=$(docker buildx imagetools inspect --raw ghcr.io/${{ github.repository_owner }}/coder:${{ inputs.version }}) || rc=$?
            if [[ "$rc" -eq 0 ]]; then
              break
            fi
            if [[ "$i" -eq 10 ]]; then
              echo "Failed to pull manifests after 10 retries"
              exit 1
            fi
            echo "Failed to pull manifests, retrying in 5 seconds"
            sleep 5
          done
          
          # Verify platforms are present
          manifests=$(
            echo "$raw_manifests" | \
              jq -r '.manifests[].platform | .os + "/" + .architecture + (if .variant then "/" + .variant else "" end)'
          )
          
          echo "Available platforms:"
          echo "$manifests"
          
          # Verify expected platforms
          echo "$manifests" | grep -q linux/amd64
          echo "$manifests" | grep -q linux/arm64
          echo "$manifests" | grep -q linux/arm/v7
          
          echo "✅ Image successfully built and pushed!"
          echo "📦 Image: ghcr.io/${{ github.repository_owner }}/coder:${{ inputs.version }}"

      - name: Output image information
        run: |
          echo "## 🐳 Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \\`${{ inputs.version }}\\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** \\`ghcr.io/${{ github.repository_owner }}/coder\\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64, linux/arm/v7" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed to registry:** ${{ inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.push_to_registry }}" = "true" ]; then
            echo "### 📥 Pull the image:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ghcr.io/${{ github.repository_owner }}/coder:${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 Run the container:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker run -d -p 7080:7080 ghcr.io/${{ github.repository_owner }}/coder:${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ Image was built but not pushed to registry" >> $GITHUB_STEP_SUMMARY
            echo "The Docker image was successfully built locally but not pushed to the registry." >> $GITHUB_STEP_SUMMARY
          fi